@page "/translation-form"
@using System.Text.Json;
@using wordcollector.Models;
@inject IJSRuntime JSRuntime

<h3>Translation Form</h3>

<EditForm Model="@translationEntry" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="japanese" class="form-label">Japanese</label>
        <InputText id="japanese" class="form-control" @bind-Value="translationEntry.Japanese" />
        <ValidationMessage For="@(() => translationEntry.Japanese)" />
    </div>
    <div class="mb-3">
        <label for="kanji" class="form-label">Kanji</label>
        <InputText id="kanji" class="form-control" @bind-Value="translationEntry.Kanji" />
    </div>
    <div class="mb-3">
        <label for="english" class="form-label">English</label>
        <InputText id="english" class="form-control" @bind-Value="translationEntry.English" />
        <ValidationMessage For="@(() => translationEntry.English)" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private TranslationEntry translationEntry = new TranslationEntry();

    private async Task HandleValidSubmit()
    {
        try
        {
            var entries = new List<TranslationEntry>();
            var filePath = "data/translations.json";

            if (File.Exists(filePath))
            {
                var json = await File.ReadAllTextAsync(filePath);
                entries = JsonSerializer.Deserialize<List<TranslationEntry>>(json) ?? new List<TranslationEntry>();
            }

            entries.Add(translationEntry);

            var options = new JsonSerializerOptions { WriteIndented = true };
            var updatedJson = JsonSerializer.Serialize(entries, options);
            await File.WriteAllTextAsync(filePath, updatedJson);

            translationEntry = new TranslationEntry();
            await JSRuntime.InvokeVoidAsync("alert", "Entry added successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving entry: {ex.Message}");
        }
    }
}