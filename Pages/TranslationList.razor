@page "/translation-list"
@using System.Text.Json;
@using wordcollector.Models
@inject IJSRuntime JSRuntime

<h3>
    <wordcollector.Components.Furigana kanji="翻訳" furigana="ほんやく" />リスト
</h3>

<div class="mb-3">
    <input @bind="searchTerm" @bind:event="oninput" placeholder="探索..." class="form-control" />
    <button class="btn btn-primary mt-2" @onclick="Search">
        <wordcollector.Components.Furigana kanji="探索" furigana="たんさく"/>
    </button>
</div>

<table class="table">
    <thead>
        <tr>
            <th @onclick='() => SortBy("Japanese")'>日本語</th>
            <th @onclick='() => SortBy("Kanji")'>漢字</th>
            <th @onclick='() => SortBy("English")'>英語</th>
            <th>アクション</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in filteredEntries)
        {
            <tr>
                <td>@entry.Japanese</td>
                <td>@entry.Kanji</td>
                <td>@entry.English</td>
                <td><button class="btn btn-danger" @onclick="() => DeleteEntry(entry)">
                        <wordcollector.Components.Furigana kanji="削除" furigana="さくじょ" />
                </button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<TranslationEntry> entries = new List<TranslationEntry>();
    private List<TranslationEntry> filteredEntries = new List<TranslationEntry>();
    private string currentSortColumn = "Japanese";
    private bool ascending = true;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEntriesAsync();
        FilterAndSortEntries();
    }

    private async Task LoadEntriesAsync()
    {
        try
        {
            if (File.Exists("data/translations.json"))
            {
                var json = await File.ReadAllTextAsync("data/translations.json");
                entries = JsonSerializer.Deserialize<List<TranslationEntry>>(json) ?? new List<TranslationEntry>();
                filteredEntries = new List<TranslationEntry>(entries);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading entries: {ex.Message}");
        }
    }

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            currentSortColumn = column;
            ascending = true;
        }
        FilterAndSortEntries();
    }

    private void Search()
    {
        FilterAndSortEntries();
    }

    private void FilterAndSortEntries()
    {
        
        filteredEntries = entries
            .Where(e => string.IsNullOrWhiteSpace(searchTerm) ||
                        e.Japanese.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        (e.Kanji?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        e.English.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

        filteredEntries = currentSortColumn switch
        {
            "Japanese" => ascending ? filteredEntries.OrderBy(e => e.Japanese).ToList() : filteredEntries.OrderByDescending(e => e.Japanese).ToList(),
            "Kanji" => ascending ? filteredEntries.OrderBy(e => e.Kanji).ToList() : filteredEntries.OrderByDescending(e => e.Kanji).ToList(),
            "English" => ascending ? filteredEntries.OrderBy(e => e.English).ToList() : filteredEntries.OrderByDescending(e => e.English).ToList(),
            _ => filteredEntries
        };
    }

    private async Task DeleteEntry(TranslationEntry entry)
    {
        if (entries.Contains(entry))
        {
            entries.Remove(entry);
            await SaveEntriesAsync();
            FilterAndSortEntries();
        }
    }

    private async Task SaveEntriesAsync()
    {
        try
        {
            var options = new JsonSerializerOptions { WriteIndented = true };
            var json = JsonSerializer.Serialize(entries, options);
            await File.WriteAllTextAsync("data/translations.json", json);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving entries: {ex.Message}");
        }
    }
}